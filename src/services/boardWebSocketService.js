import SockJS from 'sockjs-client';
import { Client } from '@stomp/stompjs';
import { API_URL, AUTH_TOKEN_KEY } from '../config';


class BoardWebSocketService {
  constructor() {
    this.stompClient = null;
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectInterval = 5000;
    this.subscriptions = new Map();
    this.authToken = null;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
   * @param {number} lessonId - ID —É—Ä–æ–∫–∞
   * @param {function} onMessage - callback –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   * @param {function} onDisconnect - callback –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
   * @param {function} onError - callback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
   */
  connect(lessonId, onMessage, onDisconnect, onError, onConnect) {
    if (this.isConnected) {
      //console.log('WebSocket already connected');
      return;
    }

    try {
      const token = localStorage.getItem(AUTH_TOKEN_KEY);
      if (!token) {
        console.error('No token found');
        return;
      }
      this.authToken = token;
      const socket = new SockJS(`${API_URL}/ws-board`);
      this.stompClient = new Client({
        webSocketFactory: () => socket,
        connectHeaders: {
          Authorization: `Bearer ${this.authToken}`,
        },
        //debug: (str) => console.log(str),
        reconnectDelay: this.reconnectInterval,
        onConnect: () => {
          this.isConnected = true;
          this.reconnectAttempts = 0;
          console.log("‚úÖ Connected to WebSocket");
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏
          this.subscribeToBoardUpdates(lessonId, onMessage);
          if (onConnect) onConnect();
        },
        onStompError: (frame) => {
          console.error('‚ùå STOMP error:', frame.headers['message']);
          if (onError) onError(frame);
        },
        onWebSocketClose: () => {
          this.isConnected = false;
          console.warn("‚ö†Ô∏è WebSocket disconnected");
          if (onDisconnect) onDisconnect();
        },
      });

      console.log(`üîå Connecting to WebSocket for lesson ${lessonId}...`);
      this.stompClient.activate();
      
    } catch (error) {
      console.error('WebSocket connection error:', error);
      if (onError) onError(error);
      this.scheduleReconnect(lessonId, onMessage, onDisconnect, onError);
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏
   */
  subscribeToBoardUpdates(lessonId, onMessage) {
    // –î–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å @SendTo("/topic/lesson/{lessonId}") –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
    const topic = `/topic/lessons/${lessonId}/board`;
    if (!this.stompClient || !this.isConnected) {
      console.warn('Cannot subscribe ‚Äî not connected');
      return;
    }
    const subscription = this.stompClient.subscribe(topic, (message) => {
      try {
        const data = JSON.parse(message.body);
        //console.log("üì© Board update received:", data);
        if (onMessage) onMessage(data);
      } catch (err) {
        console.error('Error parsing message:', err);
      }
    });
    this.subscriptions.set(topic, subscription);
    console.log(`üì° Subscribed to board updates: ${topic}`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–æ—Å–∫–∏
   */
  sendBoardUpdate(lessonId, elements, appState) {
    if (!this.isConnected || !this.stompClient) {
      console.warn('WebSocket not connected, cannot send update');
      return;
    }

    // const updateData = {
    //   lessonId: parseInt(lessonId),
    //   elements,
    //   appState,
    //   timestamp: new Date().toISOString(),
    //   userId: localStorage.getItem('userId') || 'anonymous'
    // };

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ STOMP –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      this.stompClient.publish({
        destination: `/app/lessons/${lessonId}/board`,
        body: JSON.stringify(elements), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ elements –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±—ç–∫–µ–Ω–¥–æ–º
        headers: {
          Authorization: `Bearer ${this.authToken}`,
          'Content-Type': 'application/json',
        },
      });

      // console.log('üì§ Sent board update via STOMP:', {
      //   destination: `/app/lessons/${lessonId}/board`,
      //   elementsCount: elements.length,
      //   timestamp: updateData.timestamp
      // });
    } catch (error) {
      console.error('‚ùå Error sending board update via STOMP:', error);
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket
  disconnect() {
    if (this.stompClient) {
      try {
        if (typeof this.stompClient.deactivate === 'function') {
          this.stompClient.deactivate();
        } else if (typeof this.stompClient.onDisconnect === 'function') {
          this.stompClient.deactivate();
        }
      } catch (e) {
        console.warn('Error during STOMP disconnect/deactivate:', e);
      }
      this.stompClient = null;
      //console.log("üîå WebSocket disconnected");
    }    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    this.subscriptions.forEach((subscription) => {
      subscription.unsubscribe();
    });
    this.subscriptions.clear();
    this.isConnected = false;
    
    //console.log('WebSocket disconnected');
  }

  

   /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  scheduleReconnect(lessonId, onMessage, onDisconnect, onError) {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('Max reconnection attempts reached');
      if (onError) onError(new Error('Max reconnection attempts reached'));
      return;
    }

    this.reconnectAttempts++;
    //console.log(`Scheduling reconnect attempt ${this.reconnectAttempts} in ${this.reconnectInterval}ms`);
    
    setTimeout(() => {
      this.connect(lessonId, onMessage, onDisconnect, onError);
    }, this.reconnectInterval);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  getConnectionStatus() {
    return {
      isConnected: this.isConnected,
      reconnectAttempts: this.reconnectAttempts,
      subscriptions: this.subscriptions.size
    };
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const boardWebSocketService = new BoardWebSocketService();
export default boardWebSocketService;
